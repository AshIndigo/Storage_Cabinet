plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "architectury-plugin" version "3.3-SNAPSHOT"
    id 'dev.architectury.loom' version '0.7.4-SNAPSHOT'
}

version = "${mod_version}"
group = 'com.ashindigo.storagecabinet'
archivesBaseName = "${minecraft_version}-StorageCabinet"

java.toolchain.languageVersion = JavaLanguageVersion.of(16) // 16 for 1.17+, 8 for below

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

loom {
    //silentMojangMappingsLicense()
}

repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings minecraft.officialMojangMappings()
    mappings minecraft.officialMojangMappings()
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}") // 1.16.5
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 16
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes([
                "Specification-Title"     : "storagecabinet",
                "Specification-Vendor"    : "AshIndigo",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "ashindigo",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

curseforge {
    apiKey = "${curseforge_apikey}"
    project {
        id = '304889'
        changelog = file('changelog.txt') // A file can also be set using: changelog = file('changelog.txt')
        releaseType = 'release'
        addGameVersion "${minecraft_version}"
        mainArtifact(jar) {
            displayName = "$archivesBaseName-$mod_version"
        }
    }
    options {
        //debug = true
    }
}