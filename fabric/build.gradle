plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

repositories {
    maven { // For some reason this didn't work in common
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

loom {
    accessWidenerPath = file("src/main/resources/storagecabinet.accesswidener")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    //modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}") {
        exclude group: "net.fabricmc.fabric-api", module: "fabric-gametest-api-v1"
    }
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_fabric_version}"
    modRuntimeOnly("curse.maven:smooth-swapping-513689:3434194")
    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentFabric(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

    shadowJar {
        configurations = [project.configurations.shadowCommon]
        classifier "dev-shadow"
    }

    remapJar {
        input.set shadowJar.archiveFile
        dependsOn shadowJar
        classifier "fabric"
    }

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}