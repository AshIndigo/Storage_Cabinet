plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { // For some reason this didn't work in common
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.shedaniel.me" }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

allprojects {
    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
            compileClasspath += testmod.compileClasspath
            runtimeClasspath += testmod.runtimeClasspath
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/storagecabinet.accesswidener")
    //accessWidenerPath = project(":common").loom.accessWidenerPath
        runs {
            gametest {
                server()
                name "Game Test"
                ideConfigGenerated project.rootProject == project
                vmArg "-Dfabric-api.gametest"
                vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
                runDir "build/gametest"
                source sourceSets.testmod
            }
        }
    test.dependsOn runGametest
}

repositories {
    maven { url = "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    //modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_fabric_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

allprojects {
    archivesBaseName = rootProject.minecraft_version + "-" + "Fabric" + "-" + rootProject.archives_base_name
}